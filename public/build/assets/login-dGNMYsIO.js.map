{"version":3,"file":"login-dGNMYsIO.js","sources":["../../../resources/js/pages/auth/login.tsx"],"sourcesContent":["import { Head, router, useForm, usePage } from '@inertiajs/react';\nimport { LoaderCircle } from 'lucide-react';\nimport { FormEventHandler, useEffect } from 'react';\n\nimport InputError from '@/components/input-error';\nimport TextLink from '@/components/text-link';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport AuthLayout from '@/layouts/auth-layout';\nimport { toast } from 'sonner';\n\ntype LoginForm = {\n    email: string;\n    password: string;\n    remember: boolean;\n};\n\ninterface LoginProps {\n    status?: string;\n    canResetPassword: boolean;\n}\n\nexport default function Login({ status, canResetPassword }: LoginProps) {\n    const { data, setData, post, processing, errors, reset } = useForm<Required<LoginForm>>({\n        email: '',\n        password: '',\n        remember: false,\n    });\n\n    const { flash, verifyMessage } = usePage<{ flash?: { error?: string }; verifyMessage?: string }>().props;\n    const submit: FormEventHandler = (e) => {\n        e.preventDefault();\n        post(route('login'), {\n            onFinish: () => reset('password'),\n            onError: (errors) => {\n                if (errors.email) {\n                    toast.error(errors.email);\n                }\n                if (errors.password) {\n                    toast.error(errors.password);\n                }\n            },\n        });\n    };\n\n    const handleResendVerification = () => {\n        router.post(\n            route('verification.resend'),\n            { email: data.email },\n            {\n                onSuccess: () => toast.success('Un nouveau lien de vérification a été envoyé !'),\n                onError: (errors) => {\n                    if (errors.email) {\n                        toast.error(errors.email);\n                    } else {\n                        toast.error(\"Erreur lors de l'envoi du email de vérification\");\n                    }\n                },\n            },\n        );\n    };\n\n    useEffect(() => {\n        if (flash?.error) {\n            toast.error(flash.error);\n        }\n\n        if (verifyMessage) {\n            toast.warning('Email non vérifié', {\n                description: verifyMessage,\n                action: {\n                    label: 'Renvoyer',\n                    onClick: handleResendVerification,\n                },\n            });\n        }\n    }, [flash, verifyMessage]);\n\n    return (\n        <AuthLayout title=\"Log in to your account\" description=\"Enter your email and password below to log in\">\n            <Head title=\"Log in\" />\n\n            <form className=\"flex flex-col gap-6\" onSubmit={submit}>\n                <div className=\"grid gap-6\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"email\">Adresse Email </Label>\n                        <Input\n                            id=\"email\"\n                            type=\"email\"\n                            required\n                            autoFocus\n                            tabIndex={1}\n                            autoComplete=\"email\"\n                            value={data.email}\n                            onChange={(e) => setData('email', e.target.value)}\n                            placeholder=\"email@example.com\"\n                        />\n                        <InputError message={errors.email} />\n                    </div>\n\n                    <div className=\"grid gap-2\">\n                        <div className=\"flex items-center\">\n                            <Label htmlFor=\"password\">Mot de passe</Label>\n                            {canResetPassword && (\n                                <TextLink href={route('password.request')} className=\"ml-auto text-sm\" tabIndex={5}>\n                                    Mot de passe oublié?\n                                </TextLink>\n                            )}\n                        </div>\n                        <Input\n                            id=\"password\"\n                            type=\"password\"\n                            required\n                            tabIndex={2}\n                            autoComplete=\"current-password\"\n                            value={data.password}\n                            onChange={(e) => setData('password', e.target.value)}\n                            placeholder=\"Mot de passe\"\n                        />\n                        <InputError message={errors.password} />\n                    </div>\n\n                    <div className=\"flex items-center space-x-3\">\n                        <Checkbox\n                            id=\"remember\"\n                            name=\"remember\"\n                            checked={data.remember}\n                            onCheckedChange={(checked) => setData('remember', Boolean(checked))}\n                            tabIndex={3}\n                        />\n                        <Label htmlFor=\"remember\">Se souvenir de moi</Label>\n                    </div>\n\n                    <Button type=\"submit\" className=\"mt-4 w-full\" tabIndex={4} disabled={processing}>\n                        {processing && <LoaderCircle className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Se connecter\n                    </Button>\n                </div>\n\n                <div className=\"text-center text-sm text-muted-foreground\">\n                    Déja un compte?{' '}\n                    <TextLink href={route('register')} tabIndex={5}>\n                        S'inscrire\n                    </TextLink>\n                </div>\n            </form>\n\n            {status && <div className=\"mb-4 text-center text-sm font-medium text-green-600\">{status}</div>}\n        </AuthLayout>\n    );\n}\n"],"names":["Login","status","canResetPassword","data","setData","post","processing","errors","reset","useForm","flash","verifyMessage","usePage","submit","e","toast","handleResendVerification","router","useEffect","jsxs","AuthLayout","jsx","Head","Label","Input","InputError","TextLink","Checkbox","checked","Button","LoaderCircle"],"mappings":"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"}