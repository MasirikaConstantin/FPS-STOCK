{"version":3,"file":"DirectOut-DWJBcG54.js","sources":["../../../resources/js/pages/Stock/DirectOut.tsx"],"sourcesContent":["import { useForm, usePage } from '@inertiajs/react';\nimport { useState, useEffect } from 'react';\nimport { Head, router } from '@inertiajs/react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Minus, AlertCircle, Warehouse } from 'lucide-react';\nimport { MedicalProduit, Allocation, DirectOutFormData } from '@/types/stock';\nimport { PageProps } from '@/types/types';\nimport AppLayout from '@/layouts/app-layout';\nimport { BreadcrumbItem } from '@/types';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { toast } from 'sonner';\n\ninterface DirectOutProps extends PageProps {\n  products: MedicalProduit[];\n}\n\nexport default function DirectOut({ products, auth }: DirectOutProps) {\n  const [selectedProduct, setSelectedProduct] = useState<MedicalProduit | null>(null);\n  const [quantityNeeded, setQuantityNeeded] = useState<number>(0);\n  const [allocations, setAllocations] = useState<Allocation[]>([]);\n  const [remaining, setRemaining] = useState<number>(0);\n  const [noStockError, setNoStockError] = useState<string | null>(null);\n  const { flash, error } = usePage<{ flash?: { error?: string }; verifyMessage?: string }>().props;\n  const { data, setData, post, processing, errors, reset } = useForm<DirectOutFormData>({\n    product_id: '',\n    allocations: [],\n    raison: '',\n    notes: '',\n  });\n\n  useEffect(() => {\n    if (selectedProduct && quantityNeeded > 0) {\n      calculateAllocations();\n    }\n  }, [selectedProduct, quantityNeeded]);\n\n  const calculateAllocations = () => {\n    if (!selectedProduct) return;\n\n    // Stocks disponibles (quantité > 0)\n    const availableStocks = selectedProduct.stocks?.filter(s => s.quantite > 0) || [];\n    \n    if (availableStocks.length === 0) {\n      setNoStockError(\"Ce produit n'a aucun stock disponible\");\n      setAllocations([]);\n      setRemaining(quantityNeeded);\n      return;\n    } else {\n      setNoStockError(null);\n    }\n\n    let remainingQty = quantityNeeded;\n    const newAllocations: Allocation[] = [];\n\n    // Trier par: 1. Dépôt central d'abord, 2. Date d'expiration (plus proche en premier)\n    const sortedStocks = [...availableStocks].sort((a, b) => {\n      // Priorité au dépôt central\n      if (!a.hopital && b.hopital) return -1;\n      if (a.hopital && !b.hopital) return 1;\n      \n      // Ensuite par date d'expiration\n      const dateA = a.date_expiration ? new Date(a.date_expiration).getTime() : Number.MAX_SAFE_INTEGER;\n      const dateB = b.date_expiration ? new Date(b.date_expiration).getTime() : Number.MAX_SAFE_INTEGER;\n      return dateA - dateB;\n    });\n\n    for (const stock of sortedStocks) {\n      if (remainingQty <= 0) break;\n\n      const allocatable = Math.min(stock.quantite, remainingQty);\n      newAllocations.push({\n        stock_id: stock.id,\n        quantity: allocatable,\n        hopital: stock.hopital,\n        numero_lot: stock.numero_lot,\n        date_expiration: stock.date_expiration,\n        max: stock.quantite,\n        isDepotCentral: !stock.hopital // Ajout d'un flag pour dépôt central\n      });\n      remainingQty -= allocatable;\n    }\n\n    setAllocations(newAllocations);\n    setRemaining(remainingQty);\n    setData('allocations', newAllocations);\n  };\n\n  const handleAllocationChange = (index: number, value: string) => {\n    const newValue = parseInt(value) || 0;\n    const stock = selectedProduct?.stocks?.find(s => s.id === allocations[index].stock_id);\n    \n    if (!stock) return;\n\n    if (newValue > stock.quantite) {\n      alert(`La quantité ne peut pas dépasser ${stock.quantite} pour ce stock`);\n      return;\n    }\n\n    const newAllocations = [...allocations];\n    newAllocations[index].quantity = newValue;\n    setAllocations(newAllocations);\n\n    const totalAllocated = newAllocations.reduce((sum, item) => sum + item.quantity, 0);\n    setRemaining(quantityNeeded - totalAllocated);\n    setData('allocations', newAllocations);\n  };\n\n  const submit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (remaining > 0) {\n      alert(\"Vous devez répartir toute la quantité demandée avant de soumettre\");\n      return;\n    }\n\n    post(route('stock.mouvements.direct-out'), {\n      onSuccess: () => reset(),\n      onError : () => toast.error(\"Le texte de raison ne peut pas contenir plus de 255 caractères.\")\n    });\n  };\n\n  const breadcrumbs: BreadcrumbItem[] = [\n    {\n      title: 'Stock',\n      href: route('stocks.index'),\n    },\n    {\n      title :'Mouvement Stock',\n      href: route('stock.mouvements.index'),\n    },\n    {\n      title: 'Sortie Directe',\n      href: route('stock.mouvements.direct-out.index'),\n    },\n    \n  ];\n\n  return (\n    <AppLayout breadcrumbs={breadcrumbs}>\n      <Head title=\"Sortie Directe de Stock\" />\n\n      <div className=\"py-12\">\n        <div className=\"mx-auto max-w-7xl sm:px-6 lg:px-8\">\n          <div className=\"overflow-hidden shadow-sm sm:rounded-lg\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0\">\n                <CardTitle className=\"text-2xl font-bold\">Sortie Directe de Stock</CardTitle>\n              </CardHeader>\n              <CardContent>\n                \n                <form onSubmit={submit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"product\">Produit</Label>\n                      <Select\n                        onValueChange={(value) => {\n                          const product = products.find(p => p.id.toString() === value);\n                          setSelectedProduct(product || null);\n                          setData('product_id', value);\n                          setAllocations([]);\n                          setRemaining(0);\n                          setNoStockError(null);\n                        }}\n                        value={data.product_id}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Sélectionner un produit\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {products.map(product => (\n                            <SelectItem \n                              key={product.id} \n                              value={product.id.toString()}\n                              disabled={!product.stocks?.some(s => s.quantite > 0)}\n                            >\n                              {product.name}\n                              {!product.stocks?.some(s => s.quantite > 0) && ' (Stock épuisé)'}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"quantity\">Quantité nécessaire</Label>\n                      <Input\n                        id=\"quantity\"\n                        type=\"number\"\n                        min=\"1\"\n                        value={quantityNeeded}\n                        onChange={(e) => setQuantityNeeded(Math.max(0, parseInt(e.target.value) || 0))}\n                        disabled={!selectedProduct}\n                      />\n                    </div>\n                  </div>\n\n                  {noStockError && (\n                    <Alert variant=\"destructive\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription>{noStockError}</AlertDescription>\n                    </Alert>\n                  )}\n\n                  {selectedProduct && quantityNeeded > 0 && (\n                    <div className=\"space-y-4\">\n                      {allocations.length > 0 ? (\n                        <>\n                          <div className=\"space-y-2\">\n                            <Label>Répartition des stocks</Label>\n                            <Table>\n                              <TableHeader>\n                                <TableRow>\n                                  <TableHead>Source</TableHead>\n                                  <TableHead>Lot</TableHead>\n                                  <TableHead>Expiration</TableHead>\n                                  <TableHead>Disponible</TableHead>\n                                  <TableHead>À prélever</TableHead>\n                                </TableRow>\n                              </TableHeader>\n                              <TableBody>\n                                {allocations.map((allocation, index) => (\n                                  <TableRow key={allocation.stock_id}>\n                                    <TableCell>\n                                      <div className=\"flex items-center gap-2\">\n                                        {allocation.hopital ? (\n                                          allocation.hopital.nom\n                                        ) : (\n                                          <>\n                                            <Warehouse className=\"h-4 w-4 text-blue-500\" />\n                                            <span>Dépôt central</span>\n                                            <Badge variant=\"outline\" className=\"ml-2\">\n                                              Central\n                                            </Badge>\n                                          </>\n                                        )}\n                                      </div>\n                                    </TableCell>\n                                    <TableCell>{allocation.numero_lot || 'N/A'}</TableCell>\n                                    <TableCell>\n                                      {allocation.date_expiration \n                                        ? new Date(allocation.date_expiration).toLocaleDateString() \n                                        : 'N/A'}\n                                    </TableCell>\n                                    <TableCell>{allocation.max}</TableCell>\n                                    <TableCell>\n                                      <Input\n                                        type=\"number\"\n                                        min=\"0\"\n                                        max={allocation.max}\n                                        value={allocation.quantity}\n                                        onChange={(e) => handleAllocationChange(index, e.target.value)}\n                                      />\n                                    </TableCell>\n                                  </TableRow>\n                                ))}\n                              </TableBody>\n                            </Table>\n                          </div>\n\n                          <div className=\"flex justify-between items-center\">\n                            <div className=\"text-sm\">\n                              Restant à prélever: <span className=\"font-bold\">{remaining}</span>\n                            </div>\n                            {remaining === 0 && (\n                              <div className=\"text-sm text-green-600\">\n                                Quantité totalement allouée\n                              </div>\n                            )}\n                          </div>\n                        </>\n                      ) : (\n                        <Alert variant=\"destructive\">\n                          <AlertCircle className=\"h-4 w-4\" />\n                          <AlertDescription>\n                            Pas assez de stock disponible pour ce produit. Stock total: {\n                              selectedProduct.stocks?.reduce((sum, stock) => sum + stock.quantite, 0) || 0\n                            }\n                          </AlertDescription>\n                        </Alert>\n                      )}\n\n                      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"reason\">Raison</Label>\n                          <Input\n                            id=\"reason\"\n                            value={data.raison}\n                            max={255}\n                            maxLength={254}\n                            onChange={(e) => setData('raison', e.target.value)}\n                            placeholder=\"Raison de la sortie\"\n                            required\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"notes\">Notes</Label>\n                          <Input\n                            id=\"notes\"\n                            value={data.notes}\n                            onChange={(e) => setData('notes', e.target.value)}\n                            placeholder=\"Informations supplémentaires\"\n                          />\n                        </div>\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        disabled={remaining > 0 || processing || allocations.length === 0}\n                        className=\"gap-2\"\n                      >\n                        <Minus className=\"h-4 w-4\" />\n                        Enregistrer la sortie\n                      </Button>\n                    </div>\n                  )}\n                </form>\n              </CardContent>\n            </Card>\n\n          </div>\n        </div>\n      </div>\n    </AppLayout>\n  );\n}"],"names":["DirectOut","products","auth","selectedProduct","setSelectedProduct","useState","quantityNeeded","setQuantityNeeded","allocations","setAllocations","remaining","setRemaining","noStockError","setNoStockError","flash","error","usePage","data","setData","post","processing","reset","useForm","useEffect","calculateAllocations","availableStocks","_a","remainingQty","newAllocations","sortedStocks","a","b","dateA","dateB","stock","allocatable","handleAllocationChange","index","value","newValue","s","totalAllocated","sum","item","submit","e","toast","breadcrumbs","jsxs","AppLayout","jsx","Head","Card","CardHeader","CardTitle","CardContent","Label","Select","product","p","SelectTrigger","SelectValue","SelectContent","SelectItem","_b","Input","Alert","AlertCircle","AlertDescription","Fragment","Table","TableHeader","TableRow","TableHead","TableBody","allocation","TableCell","Warehouse","Badge","Button","Minus"],"mappings":"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"}