{"version":3,"file":"reset-password-C6OtwbIE.js","sources":["../../../resources/js/pages/auth/reset-password.tsx"],"sourcesContent":["import { Head, useForm } from '@inertiajs/react';\nimport { LoaderCircle } from 'lucide-react';\nimport { FormEventHandler } from 'react';\n\nimport InputError from '@/components/input-error';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport AuthLayout from '@/layouts/auth-layout';\n\ninterface ResetPasswordProps {\n    token: string;\n    email: string;\n}\n\ntype ResetPasswordForm = {\n    token: string;\n    email: string;\n    password: string;\n    password_confirmation: string;\n};\n\nexport default function ResetPassword({ token, email }: ResetPasswordProps) {\n    const { data, setData, post, processing, errors, reset } = useForm<Required<ResetPasswordForm>>({\n        token: token,\n        email: email,\n        password: '',\n        password_confirmation: '',\n    });\n\n    const submit: FormEventHandler = (e) => {\n        e.preventDefault();\n        post(route('password.store'), {\n            onFinish: () => reset('password', 'password_confirmation'),\n        });\n    };\n\n    return (\n        <AuthLayout title=\"Reset password\" description=\"Please enter your new password below\">\n            <Head title=\"Reset password\" />\n\n            <form onSubmit={submit}>\n                <div className=\"grid gap-6\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                            id=\"email\"\n                            type=\"email\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            value={data.email}\n                            className=\"mt-1 block w-full\"\n                            readOnly\n                            onChange={(e) => setData('email', e.target.value)}\n                        />\n                        <InputError message={errors.email} className=\"mt-2\" />\n                    </div>\n\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"password\">Password</Label>\n                        <Input\n                            id=\"password\"\n                            type=\"password\"\n                            name=\"password\"\n                            autoComplete=\"new-password\"\n                            value={data.password}\n                            className=\"mt-1 block w-full\"\n                            autoFocus\n                            onChange={(e) => setData('password', e.target.value)}\n                            placeholder=\"Password\"\n                        />\n                        <InputError message={errors.password} />\n                    </div>\n\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"password_confirmation\">Confirmer le mot de passe</Label>\n                        <Input\n                            id=\"password_confirmation\"\n                            type=\"password\"\n                            name=\"password_confirmation\"\n                            autoComplete=\"new-password\"\n                            value={data.password_confirmation}\n                            className=\"mt-1 block w-full\"\n                            onChange={(e) => setData('password_confirmation', e.target.value)}\n                            placeholder=\"Confirm password\"\n                        />\n                        <InputError message={errors.password_confirmation} className=\"mt-2\" />\n                    </div>\n\n                    <Button type=\"submit\" className=\"mt-4 w-full\" disabled={processing}>\n                        {processing && <LoaderCircle className=\"h-4 w-4 animate-spin\" />}\n                        RÃ©initialiser le mot de passe\n                    </Button>\n                </div>\n            </form>\n        </AuthLayout>\n    );\n}\n"],"names":["ResetPassword","token","email","data","setData","post","processing","errors","reset","useForm","submit","e","jsxs","AuthLayout","jsx","Head","Label","Input","InputError","Button","LoaderCircle"],"mappings":"sdAsBA,SAAwBA,EAAc,CAAE,MAAAC,EAAO,MAAAC,GAA6B,CAClE,KAAA,CAAE,KAAAC,EAAM,QAAAC,EAAS,KAAAC,EAAM,WAAAC,EAAY,OAAAC,EAAQ,MAAAC,GAAUC,EAAqC,CAC5F,MAAAR,EACA,MAAAC,EACA,SAAU,GACV,sBAAuB,EAAA,CAC1B,EAEKQ,EAA4BC,GAAM,CACpCA,EAAE,eAAe,EACZN,EAAA,MAAM,gBAAgB,EAAG,CAC1B,SAAU,IAAMG,EAAM,WAAY,uBAAuB,CAAA,CAC5D,CACL,EAEA,OACKI,EAAAA,KAAAC,EAAA,CAAW,MAAM,iBAAiB,YAAY,uCAC3C,SAAA,CAACC,EAAAA,IAAAC,EAAA,CAAK,MAAM,gBAAiB,CAAA,QAE5B,OAAK,CAAA,SAAUL,EACZ,SAACE,EAAA,KAAA,MAAA,CAAI,UAAU,aACX,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,aACX,SAAA,CAACE,EAAA,IAAAE,EAAA,CAAM,QAAQ,QAAQ,SAAK,QAAA,EAC5BF,EAAA,IAACG,EAAA,CACG,GAAG,QACH,KAAK,QACL,KAAK,QACL,aAAa,QACb,MAAOd,EAAK,MACZ,UAAU,oBACV,SAAQ,GACR,SAAWQ,GAAMP,EAAQ,QAASO,EAAE,OAAO,KAAK,CAAA,CACpD,QACCO,EAAW,CAAA,QAASX,EAAO,MAAO,UAAU,MAAO,CAAA,CAAA,EACxD,EAEAK,EAAAA,KAAC,MAAI,CAAA,UAAU,aACX,SAAA,CAACE,EAAA,IAAAE,EAAA,CAAM,QAAQ,WAAW,SAAQ,WAAA,EAClCF,EAAA,IAACG,EAAA,CACG,GAAG,WACH,KAAK,WACL,KAAK,WACL,aAAa,eACb,MAAOd,EAAK,SACZ,UAAU,oBACV,UAAS,GACT,SAAWQ,GAAMP,EAAQ,WAAYO,EAAE,OAAO,KAAK,EACnD,YAAY,UAAA,CAChB,EACCG,EAAAA,IAAAI,EAAA,CAAW,QAASX,EAAO,QAAU,CAAA,CAAA,EAC1C,EAEAK,EAAAA,KAAC,MAAI,CAAA,UAAU,aACX,SAAA,CAACE,EAAA,IAAAE,EAAA,CAAM,QAAQ,wBAAwB,SAAyB,4BAAA,EAChEF,EAAA,IAACG,EAAA,CACG,GAAG,wBACH,KAAK,WACL,KAAK,wBACL,aAAa,eACb,MAAOd,EAAK,sBACZ,UAAU,oBACV,SAAWQ,GAAMP,EAAQ,wBAAyBO,EAAE,OAAO,KAAK,EAChE,YAAY,kBAAA,CAChB,QACCO,EAAW,CAAA,QAASX,EAAO,sBAAuB,UAAU,MAAO,CAAA,CAAA,EACxE,SAECY,EAAO,CAAA,KAAK,SAAS,UAAU,cAAc,SAAUb,EACnD,SAAA,CAAcA,GAAAQ,EAAAA,IAACM,EAAa,CAAA,UAAU,sBAAuB,CAAA,EAAG,+BAAA,CAErE,CAAA,CAAA,CAAA,CACJ,CACJ,CAAA,CAAA,EACJ,CAER"}