{"version":3,"file":"DivisionForm-cMVmIuLw.js","sources":["../../../resources/js/components/DivisionForm.tsx"],"sourcesContent":["// resources/js/Components/DivisionForm.tsx\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useForm } from '@inertiajs/react';\nimport { toast } from 'sonner';\n\ninterface DivisionFormProps {\n    division?: {\n        id: number;\n        nom: string;\n        type: string;\n        code?: string;\n        parent_id?: number;\n        is_active: boolean;\n    };\n    types: string[];\n    parents: Array<{\n        id: number;\n        nom: string;\n        type: string;\n    }>;\n    isEdit?: boolean;\n}\n\nexport function DivisionForm({ division, types, parents, isEdit = false }: DivisionFormProps) {\n    const { data, setData, post, put, processing, errors } = useForm({\n        nom: division?.nom || '',\n        type: division?.type || 'province',\n        code: division?.code || '',\n        parent_id: division?.parent_id || null,\n        is_active: division?.is_active ?? true,\n    });\n\n    const getParentTypesFor = (childType: string): string[] => {\n        const hierarchy: Record<string, string[]> = {\n            province: [],\n            territoire: ['province'],\n            ville: ['province', 'territoire'], // Ville peut appartenir à province OU territoire\n            commune: ['ville'],\n            quartier: ['commune']\n        };\n        \n        return hierarchy[childType] || [];\n    };\n\n    const filteredParents = parents.filter(parent => {\n        const allowedParentTypes = getParentTypesFor(data.type);\n        return allowedParentTypes.includes(parent.type);\n    });\n\n    const shouldDisableParentSelect = data.type === 'province' || filteredParents.length === 0;\n\n    const getParentPlaceholder = () => {\n        if (data.type === 'province') return 'Les provinces n\\'ont pas de parent';\n        if (filteredParents.length === 0) return 'Aucun parent disponible pour ce type';\n        return 'Sélectionnez une division parente';\n    };\n\n    const onSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (isEdit && division) {\n            put(route('divisions.update', division.id), {\n                onSuccess: () => toast.success('Division mise à jour avec succès'),\n            });\n        } else {\n            post(route('division.store'), {\n                onSuccess: () => toast.success('Division créée avec succès'),\n            });\n        }\n    };\n\n    return (\n        <form onSubmit={onSubmit} id=\"division-form\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"nom\">Nom</Label>\n                    <Input\n                        id=\"nom\"\n                        value={data.nom}\n                        onChange={(e) => setData('nom', e.target.value)}\n                        placeholder=\"Nom de la division\"\n                        required\n                    />\n                    {errors.nom && <p className=\"text-sm text-red-500\">{errors.nom}</p>}\n                </div>\n\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"type\">Type</Label>\n                    <Select\n                        value={data.type}\n                        onValueChange={(value) => setData('type', value)}\n                    >\n                        <SelectTrigger>\n                            <SelectValue placeholder=\"Sélectionnez un type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                            {types.map((type) => (\n                                <SelectItem key={type} value={type}>\n                                    {type.charAt(0).toUpperCase() + type.slice(1)}\n                                </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n                    {errors.type && <p className=\"text-sm text-red-500\">{errors.type}</p>}\n                </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"code\">Code</Label>\n                    <Input\n                        id=\"code\"\n                        value={data.code}\n                        onChange={(e) => setData('code', e.target.value)}\n                        placeholder=\"Code unique (optionnel)\"\n                    />\n                    {errors.code && <p className=\"text-sm text-red-500\">{errors.code}</p>}\n                </div>\n\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"parent_id\">Division parente</Label>\n                    <Select\n                        value={data.parent_id?.toString() || ''}\n                        onValueChange={(value) => setData('parent_id', value ? parseInt(value) : null)}\n                        disabled={shouldDisableParentSelect}\n                    >\n                        <SelectTrigger>\n                            <SelectValue placeholder={getParentPlaceholder()} />\n                        </SelectTrigger>\n                        <SelectContent>\n                            {filteredParents.map((parent) => (\n                                <SelectItem key={parent.id} value={parent.id.toString()}>\n                                    {parent.nom} ({parent.type})\n                                </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n                    {errors.parent_id && <p className=\"text-sm text-red-500\">{errors.parent_id}</p>}\n                </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2 mt-4\">\n                <Switch\n                    id=\"is_active\"\n                    checked={data.is_active}\n                    onCheckedChange={(checked) => setData('is_active', checked)}\n                />\n                <Label htmlFor=\"is_active\">Actif</Label>\n            </div>\n        </form>\n    );\n}"],"names":["DivisionForm","division","types","parents","isEdit","data","setData","post","put","errors","useForm","getParentTypesFor","childType","filteredParents","parent","shouldDisableParentSelect","getParentPlaceholder","onSubmit","e","toast","jsxs","jsx","Label","Input","Select","value","SelectTrigger","SelectValue","SelectContent","type","SelectItem","_a","Switch","checked"],"mappings":"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"}