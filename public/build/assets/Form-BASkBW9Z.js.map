{"version":3,"file":"Form-BASkBW9Z.js","sources":["../../../resources/js/pages/Users/Form.tsx"],"sourcesContent":["import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport AppLayout from '@/layouts/app-layout';\nimport { BreadcrumbItem } from '@/types';\nimport { App, PageProps } from '@/types/types';\nimport { Head, Link, useForm } from '@inertiajs/react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { toast } from 'sonner';\nimport {  Role } from '@/types/types';\n\ninterface FormProps extends PageProps {\n    user?: {\n        id: number;\n        name: string;\n        email: string;\n        role: Role;\n        is_active: boolean;\n        profile?: {\n            phone?: string;\n            address?: string;\n            hopital_id?: number;\n        };\n    };\n    hopitals: App.Hopital[];\n    roles: Role[];\n}\n\nexport default function Form({ user, hopitals, roles }: FormProps) {\n    const { data, setData, post, put, processing, errors } = useForm({\n        name: user?.name || '',\n        email: user?.email || '',\n        password: '',\n        password_confirmation: '',\n        role: user?.role || 'admin',\n        phone: user?.profile?.phone || '',\n        address: user?.profile?.address || '',\n        hopital_id: user?.profile?.hopital_id || undefined,\n        is_active: user?.is_active ?? true,\n    });\n    const onSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if (user) {\n            put(route('users.update', user.id), {\n                onSuccess: () => toast.success('Utilisateur mis à jour avec succès'),\n            });\n        } else {\n            post(route('users.store'), {\n                onSuccess: () => toast.success('Utilisateur créé avec succès'),\n            });\n        }\n    };\n\n    const breadcrumbs: BreadcrumbItem[] = [\n        {\n            title: 'Utilisateurs',\n            href: route('users.index'),\n        },\n        {\n            title: user ? 'Modifier utilisateur' : 'Nouvel utilisateur',\n            href: '#',\n        },\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title={user ? 'Modifier utilisateur' : 'Nouvel utilisateur'} />\n\n            <div className=\"py-12\">\n                <div className=\"mx-auto max-w-7xl sm:px-6 lg:px-8\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>{user ? 'Modifier l\\'utilisateur' : 'Créer un nouvel utilisateur'}</CardTitle>\n                            <CardDescription>\n                                Remplissez les champs ci-dessous pour {user ? 'modifier' : 'créer'} un utilisateur\n                            </CardDescription>\n                        </CardHeader>\n                        <form onSubmit={onSubmit}>\n                            <CardContent className=\"space-y-4\">\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"name\">Nom complet</Label>\n                                        <Input\n                                            id=\"name\"\n                                            value={data.name}\n                                            onChange={(e) => setData('name', e.target.value)}\n                                            placeholder=\"Nom complet\"\n                                            required\n                                        />\n                                        {errors.name && <p className=\"text-sm text-red-500\">{errors.name}</p>}\n                                    </div>\n\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"email\">Email</Label>\n                                        <Input\n                                            id=\"email\"\n                                            type=\"email\"\n                                            value={data.email}\n                                            onChange={(e) => setData('email', e.target.value)}\n                                            placeholder=\"Email\"\n                                            required\n                                        />\n                                        {errors.email && <p className=\"text-sm text-red-500\">{errors.email}</p>}\n                                    </div>\n                                </div>\n\n                                {!user && (\n                                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                        <div className=\"space-y-2\">\n                                            <Label htmlFor=\"password\">Mot de passe</Label>\n                                            <Input\n                                                id=\"password\"\n                                                type=\"password\"\n                                                value={data.password}\n                                                onChange={(e) => setData('password', e.target.value)}\n                                                placeholder=\"Mot de passe\"\n                                                required={!user}\n                                            />\n                                            {errors.password && <p className=\"text-sm text-red-500\">{errors.password}</p>}\n                                        </div>\n\n                                        <div className=\"space-y-2\">\n                                            <Label htmlFor=\"password_confirmation\">Confirmation</Label>\n                                            <Input\n                                                id=\"password_confirmation\"\n                                                type=\"password\"\n                                                value={data.password_confirmation}\n                                                onChange={(e) => setData('password_confirmation', e.target.value)}\n                                                placeholder=\"Confirmez le mot de passe\"\n                                                required={!user}\n                                            />\n                                        </div>\n                                    </div>\n                                )}\n\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"role\">Rôle</Label>\n                                        <Select\n                                            value={data.role}\n                                            onValueChange={(value) => setData('role', value as Role)}\n                                        >\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"Sélectionnez un rôle\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                {roles.map((role) => (\n                                                    <SelectItem key={role} value={role}>\n                                                        {role}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                        {errors.role && <p className=\"text-sm text-red-500\">{errors.role}</p>}\n                                    </div>\n\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"hopital_id\">Hôpital</Label>\n                                        <Select\n                                            value={data.hopital_id?.toString() || ''}\n                                            onValueChange={(value) => setData('hopital_id', value ? parseInt(value) : undefined)}\n                                            disabled={data.role === 'admin_central'}\n                                        >\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"Sélectionnez un hôpital\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                {hopitals.map((hopital) => (\n                                                    <SelectItem key={hopital.id} value={hopital.id.toString()}>\n                                                        {hopital.nom}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                        {errors.hopital_id && <p className=\"text-sm text-red-500\">{errors.hopital_id}</p>}\n                                    </div>\n                                </div>\n\n                                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"phone\">Téléphone</Label>\n                                        <Input\n                                            id=\"phone\"\n                                            value={data.phone}\n                                            onChange={(e) => setData('phone', e.target.value)}\n                                            placeholder=\"Numéro de téléphone\"\n                                        />\n                                        {errors.phone && <p className=\"text-sm text-red-500\">{errors.phone}</p>}\n                                    </div>\n\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"address\">Adresse</Label>\n                                        <Input\n                                            id=\"address\"\n                                            value={data.address}\n                                            onChange={(e) => setData('address', e.target.value)}\n                                            placeholder=\"Adresse\"\n                                        />\n                                        {errors.address && <p className=\"text-sm text-red-500\">{errors.address}</p>}\n                                    </div>\n                                </div>\n\n                                <div className=\"flex items-center space-x-2\">\n                                    <Switch\n                                        id=\"is_active\"\n                                        checked={data.is_active}\n                                        onCheckedChange={(checked) => setData('is_active', checked)}\n                                    />\n                                    <Label htmlFor=\"is_active\">Actif</Label>\n                                </div>\n                            </CardContent>\n                            <CardFooter className=\"flex justify-between mt-4\">\n                                <Button variant=\"outline\" asChild>\n                                    <Link href={route('users.index')}>Annuler</Link>\n                                </Button>\n                                <Button type=\"submit\" disabled={processing}>\n                                    {user ? 'Mettre à jour' : 'Créer'}\n                                </Button>\n                            </CardFooter>\n                        </form>\n                    </Card>\n                </div>\n            </div>\n        </AppLayout>\n    );\n}"],"names":["Form","user","hopitals","roles","data","setData","post","put","processing","errors","useForm","_a","_b","_c","onSubmit","e","toast","breadcrumbs","jsxs","AppLayout","jsx","Head","Card","CardHeader","CardTitle","CardDescription","CardContent","Label","Input","Select","value","SelectTrigger","SelectValue","SelectContent","role","SelectItem","_d","hopital","Switch","checked","CardFooter","Button","Link"],"mappings":"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"}