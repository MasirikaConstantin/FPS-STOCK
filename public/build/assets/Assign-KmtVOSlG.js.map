{"version":3,"file":"Assign-KmtVOSlG.js","sources":["../../../resources/js/pages/Admin/Permissions/Assign.tsx"],"sourcesContent":["import AppLayout from '@/layouts/app-layout';\nimport { BreadcrumbItem } from '@/types';\nimport { Head, useForm, router } from '@inertiajs/react';\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\nimport { toast } from 'sonner';\n\ninterface Permission {\n    id: number;\n    name: string;\n    action: string;\n    description: string;\n}\n\ninterface User {\n    id: number;\n    name: string;\n    email: string;\n}\n\ninterface Props {\n    users: User[];\n    permissions: Record<string, Permission[]>;\n    current_permissions: Record<string, { permission_id: number }[]>;\n}\n\nexport default function PermissionAssignment({ users, permissions, current_permissions }: Props) {\n    const [selectedUser, setSelectedUser] = useState<number | null>(null);\n    const [selectedPermissions, setSelectedPermissions] = useState<number[]>([]);\n\n    const { data, setData, post, processing } = useForm({\n        user_id: null as number | null,\n        permissions: [] as number[],\n    });\n\n    // Synchroniser les données du formulaire avec l'état local\n    useEffect(() => {\n        setData({\n            user_id: selectedUser,\n            permissions: selectedPermissions,\n        });\n    }, [selectedUser, selectedPermissions]);\n\n    const handleUserChange = (userId: string) => {\n        const id = userId ? parseInt(userId) : null;\n        setSelectedUser(id);\n\n        if (id) {\n            const userPerms = current_permissions[id] || [];\n            setSelectedPermissions(userPerms.map(p => p.permission_id));\n        } else {\n            setSelectedPermissions([]);\n        }\n    };\n\n    const handlePermissionToggle = (permissionId: number) => {\n        setSelectedPermissions(prev =>\n            prev.includes(permissionId)\n                ? prev.filter(id => id !== permissionId)\n                : [...prev, permissionId]\n        );\n    };\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        \n        if (!selectedUser) {\n            // Afficher une erreur si aucun utilisateur n'est sélectionné\n            return;\n        }\n\n        post(route('admin.permissions.assign'), {\n            preserveScroll: true,\n            onSuccess: () => {\n                toast.success('Permissions attribuées avec succès');\n            },\n            onError: () => {\n                toast.error('Une erreur est survenue lors de l\\'attribution des permissions');\n            },\n        });\n    };\n\n    const breadcrumbs: BreadcrumbItem[] = [\n        {\n            title: 'Accueil',\n            href: route('dashboard'),\n        },\n        {\n            title: 'Gestion des Permissions',\n            href: route('admin.permissions.index'),\n        },\n        {\n            title: 'Attribuer des Permissions',\n            href: route('admin.permissions.assign'),\n        },\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Gestion des Permissions\" />\n\n            <div className=\"py-12 space-y-6\">\n                <div className=\"mx-auto max-w-7xl sm:px-6 lg:px-8 space-y-6\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Sélectionner un Utilisateur</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <Select \n                                onValueChange={handleUserChange} \n                                value={selectedUser?.toString() || ''}\n                                required\n                            >\n                                <SelectTrigger className=\"w-full\">\n                                    <SelectValue placeholder=\"Sélectionner un utilisateur\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {users.map(user => (\n                                        <SelectItem key={user.id} value={user.id.toString()}>\n                                            {user.name} <Badge variant=\"secondary\" className=\"ml-2\">{user.email}</Badge>\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                        </CardContent>\n                    </Card>\n\n                    {selectedUser && (\n                        <form onSubmit={handleSubmit}>\n                            <Card className='mt-6'>\n                                <CardHeader>\n                                    <CardTitle>Permissions Disponibles</CardTitle>\n                                </CardHeader>\n                                <CardContent className=\"space-y-6\">\n                                    {Object.entries(permissions).map(([module, modulePermissions]) => (\n                                        <div key={module} className=\"space-y-4\">\n                                            <Label className=\"text-lg capitalize\">{module}</Label>\n                                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                                                {modulePermissions.map(permission => (\n                                                    <div key={permission.id} className=\"flex items-center space-x-3\">\n                                                        <Checkbox\n                                                            id={`perm-${permission.id}`}\n                                                            checked={selectedPermissions.includes(permission.id)}\n                                                            onCheckedChange={() => handlePermissionToggle(permission.id)}\n                                                        />\n                                                        <Label htmlFor={`perm-${permission.id}`} className=\"space-y-1\">\n                                                            <div className=\"font-medium capitalize\">{permission.action}</div>\n                                                            <p className=\"text-sm text-muted-foreground\">{permission.description}</p>\n                                                        </Label>\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        </div>\n                                    ))}\n\n                                    <Button\n                                        type=\"submit\"\n                                        disabled={processing || selectedPermissions.length === 0}\n                                        className=\"w-full sm:w-auto\"\n                                    >\n                                        {processing ? 'Enregistrement...' : 'Enregistrer les Permissions'}\n                                    </Button>\n                                </CardContent>\n                            </Card>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </AppLayout>\n    );\n}"],"names":["PermissionAssignment","users","permissions","current_permissions","selectedUser","setSelectedUser","useState","selectedPermissions","setSelectedPermissions","setData","post","processing","useForm","useEffect","handleUserChange","userId","id","userPerms","p","handlePermissionToggle","permissionId","prev","handleSubmit","e","toast","breadcrumbs","jsxs","AppLayout","jsx","Head","Card","CardHeader","CardTitle","CardContent","Select","SelectTrigger","SelectValue","SelectContent","user","SelectItem","Badge","module","modulePermissions","Label","permission","Checkbox","Button"],"mappings":"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"}