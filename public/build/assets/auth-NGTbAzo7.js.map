{"version":3,"file":"auth-NGTbAzo7.js","sources":["../../../resources/js/pages/auth/auth.tsx"],"sourcesContent":["import { Head, router, useForm, usePage } from '@inertiajs/react';\nimport { LoaderCircle } from 'lucide-react';\nimport { FormEventHandler, useEffect, useState } from 'react';\n\nimport InputError from '@/components/input-error';\nimport TextLink from '@/components/text-link';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport AuthLayout from '@/layouts/auth-layout';\nimport { toast } from 'sonner';\n\ntype LoginForm = {\n    email: string;\n    password: string;\n    remember: boolean;\n};\n\ntype RegisterForm = {\n    name: string;\n    email: string;\n    password: string;\n    password_confirmation: string;\n};\n\nexport default function AuthCombined() {\n    const [activeTab, setActiveTab] = useState<'login' | 'register'>('login');\n    //const { toast } = Toaster();\n    const { errors: pageErrors, flash, verifyMessage } = usePage<{ flash: { error?: string }; auth: { user: { id: number; name: string; email: string } } }>().props;\n    // Gestion des erreurs spécifiques\n\n    useEffect(() => {\n        if (flash?.error) {\n            //console.log(flash.error);\n            //toast(\"Erreur de connexion\");\n        }\n        const handleResendVerification = () => {\n            router.get(route('verification-mail'));\n        };\n\n        if (verifyMessage) {\n            toast('Email non vérifié', {\n                description: typeof verifyMessage === 'string' ? verifyMessage : String(verifyMessage),\n                action: {\n                    label: 'Vérifier',\n                    onClick: handleResendVerification,\n                },\n            });\n        }\n    }, [flash, toast]);\n\n    // Login form\n    const {\n        data: loginData,\n        setData: setLoginData,\n        post: loginPost,\n        processing: loginProcessing,\n        errors: loginErrors,\n        reset: resetLogin,\n    } = useForm<Required<LoginForm>>({\n        email: '',\n        password: '',\n        remember: false,\n    });\n\n    // Register form\n    const {\n        data: registerData,\n        setData: setRegisterData,\n        post: registerPost,\n        processing: registerProcessing,\n        errors: registerErrors,\n        reset: resetRegister,\n    } = useForm<Required<RegisterForm>>({\n        name: '',\n        email: '',\n        password: '',\n        password_confirmation: '',\n    });\n\n    const handleLogin: FormEventHandler = (e) => {\n        e.preventDefault();\n        loginPost(route('login'), {\n            onFinish: () => resetLogin('password'),\n            onError: () => {\n             \n                if (pageErrors.email) {\n                    //toast( \"Erreur : \" +pageErrors.email);\n                }\n            },\n        });\n    };\n\n    const handleResendVerification = () => {\n        router.post(\n            route('verification.send-to'),\n            { email: registerData.email },\n            {\n                onSuccess: () => toast.success('Un lien de vérification a été envoyé !'),\n                onError: (errors) => {\n                    if (errors.email) {\n                        toast.error(errors.email);\n                    } else {\n                        toast.error(\"Erreur lors de l'envoi du email de vérification\");\n                    }\n                },\n            },\n        );\n    };\n    const handleRegister: FormEventHandler = (e) => {\n        e.preventDefault();\n        registerPost(route('register'), {\n            onFinish: () => resetRegister('password', 'password_confirmation'),\n            onSuccess: () => {\n                handleResendVerification();\n            },\n        });\n    };\n\n    return (\n        <AuthLayout\n            title={activeTab === 'login' ? 'Connexion' : 'Inscription'}\n            description={\n                activeTab === 'login' ? 'Entrez votre email et mot de passe pour vous connecter' : 'Créez votre compte en remplissant le formulaire'\n            }\n        >\n            <Head title={activeTab === 'login' ? 'Connexion' : 'Inscription'} />\n            {flash?.verifyMessage && <InputError message={pageErrors.verifyMessage} />}\n            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'login' | 'register')} className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"login\">Connexion</TabsTrigger>\n                    <TabsTrigger value=\"register\">Inscription</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"login\" className=\"pt-4\">\n                    <form className=\"flex flex-col gap-6\" onSubmit={handleLogin}>\n                        <div className=\"grid gap-6\">\n                            <div className=\"grid gap-2\">\n                                <Label htmlFor=\"login-email\">Email</Label>\n                                <Input\n                                    id=\"login-email\"\n                                    type=\"email\"\n                                    required\n                                    autoFocus\n                                    autoComplete=\"email\"\n                                    value={loginData.email}\n                                    onChange={(e) => setLoginData('email', e.target.value)}\n                                    placeholder=\"email@exemple.com\"\n                                    disabled={loginProcessing}\n                                />\n                                <InputError message={loginErrors.email} />\n                            </div>\n\n                            <div className=\"grid gap-2\">\n                                <div className=\"flex items-center\">\n                                    <Label htmlFor=\"login-password\">Mot de passe</Label>\n                                    <TextLink href={route('password.request')} className=\"ml-auto text-sm\">\n                                        Mot de passe oublié ?\n                                    </TextLink>\n                                </div>\n                                <Input\n                                    id=\"login-password\"\n                                    type=\"password\"\n                                    required\n                                    autoComplete=\"current-password\"\n                                    value={loginData.password}\n                                    onChange={(e) => setLoginData('password', e.target.value)}\n                                    placeholder=\"••••••••\"\n                                    disabled={loginProcessing}\n                                />\n                                <InputError message={loginErrors.password} />\n                            </div>\n\n                            <div className=\"flex items-center space-x-3\">\n                                <Checkbox\n                                    id=\"remember\"\n                                    name=\"remember\"\n                                    checked={loginData.remember}\n                                    onClick={() => setLoginData('remember', !loginData.remember)}\n                                    disabled={loginProcessing}\n                                />\n                                <Label htmlFor=\"remember\">Se souvenir de moi</Label>\n                            </div>\n\n                            <Button type=\"submit\" className=\"mt-4 w-full\" disabled={loginProcessing}>\n                                {loginProcessing && <LoaderCircle className=\"h-4 w-4 animate-spin\" />}\n                                Se connecter\n                            </Button>\n                        </div>\n                    </form>\n                </TabsContent>\n\n                <TabsContent value=\"register\" className=\"pt-4\">\n                    <form className=\"flex flex-col gap-6\" onSubmit={handleRegister}>\n                        <div className=\"grid gap-6\">\n                            <div className=\"grid gap-2\">\n                                <Label htmlFor=\"register-name\">Nom complet</Label>\n                                <Input\n                                    id=\"register-name\"\n                                    type=\"text\"\n                                    required\n                                    autoFocus\n                                    autoComplete=\"name\"\n                                    value={registerData.name}\n                                    onChange={(e) => setRegisterData('name', e.target.value)}\n                                    disabled={registerProcessing}\n                                    placeholder=\"Votre nom complet\"\n                                />\n                                <InputError message={registerErrors.name} />\n                            </div>\n\n                            <div className=\"grid gap-2\">\n                                <Label htmlFor=\"register-email\">Email</Label>\n                                <Input\n                                    id=\"register-email\"\n                                    type=\"email\"\n                                    required\n                                    autoComplete=\"email\"\n                                    value={registerData.email}\n                                    onChange={(e) => setRegisterData('email', e.target.value)}\n                                    disabled={registerProcessing}\n                                    placeholder=\"email@exemple.com\"\n                                />\n                                <InputError message={registerErrors.email} />\n                            </div>\n\n                            <div className=\"grid gap-2\">\n                                <Label htmlFor=\"register-password\">Mot de passe</Label>\n                                <Input\n                                    id=\"register-password\"\n                                    type=\"password\"\n                                    required\n                                    autoComplete=\"new-password\"\n                                    value={registerData.password}\n                                    onChange={(e) => setRegisterData('password', e.target.value)}\n                                    disabled={registerProcessing}\n                                    placeholder=\"••••••••\"\n                                />\n                                <InputError message={registerErrors.password} />\n                            </div>\n\n                            <div className=\"grid gap-2\">\n                                <Label htmlFor=\"register-password-confirmation\">Confirmer le mot de passe</Label>\n                                <Input\n                                    id=\"register-password-confirmation\"\n                                    type=\"password\"\n                                    required\n                                    autoComplete=\"new-password\"\n                                    value={registerData.password_confirmation}\n                                    onChange={(e) => setRegisterData('password_confirmation', e.target.value)}\n                                    disabled={registerProcessing}\n                                    placeholder=\"••••••••\"\n                                />\n                                <InputError message={registerErrors.password_confirmation} />\n                            </div>\n\n                            <Button type=\"submit\" className=\"mt-2 w-full\" disabled={registerProcessing}>\n                                {registerProcessing && <LoaderCircle className=\"h-4 w-4 animate-spin\" />}\n                                S'inscrire\n                            </Button>\n                        </div>\n                    </form>\n                </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n                {activeTab === 'login' ? (\n                    <>\n                        Pas encore de compte ? <TextLink href={route('register')} onClick={() => setActiveTab('register')}>S'inscrire</TextLink>\n                    </>\n                ) : (\n                    <>\n                        Déjà un compte ? <TextLink href={route('login')} onClick={() => setActiveTab('login')}>Se connecter</TextLink>\n                    </>\n                )}\n            </div>\n        </AuthLayout>\n    );\n}\n"],"names":["AuthCombined","activeTab","setActiveTab","useState","pageErrors","flash","verifyMessage","usePage","useEffect","handleResendVerification","router","toast","loginData","setLoginData","loginPost","loginProcessing","loginErrors","resetLogin","useForm","registerData","setRegisterData","registerPost","registerProcessing","registerErrors","resetRegister","handleLogin","e","errors","handleRegister","jsxs","AuthLayout","jsx","Head","InputError","Tabs","value","TabsList","TabsTrigger","TabsContent","Label","Input","TextLink","Checkbox","Button","LoaderCircle","Fragment"],"mappings":"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"}